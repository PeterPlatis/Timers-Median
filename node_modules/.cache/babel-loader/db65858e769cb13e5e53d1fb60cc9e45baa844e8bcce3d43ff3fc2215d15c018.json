{"ast":null,"code":"// // import React, { useState, useEffect } from \"react\";\n\n// // export function TimerWithMedian() {\n// //     const [startTime, setStartTime] = useState(null);\n// //     const [elapsed, setElapsed] = useState(0);\n// //     const [running, setRunning] = useState(false);\n// //     const [logs, setLogs] = useState([]);\n// //     const [allDates, setAllDates] = useState([]);\n// //     const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split(\"T\")[0]);\n\n// //     const todayKey = `logs-${selectedDate}`;\n\n// //     useEffect(() => {\n// //         const handleKeyDown = (e) => {\n// //             if (e.code === \"Space\") {\n// //                 if ([\"INPUT\", \"SELECT\", \"TEXTAREA\"].includes(document.activeElement.tagName)) {\n// //                     return;\n// //                 }\n// //                 e.preventDefault();\n// //                 running ? stopTimer() : startTimer();\n// //             }\n// //         };\n// //         window.addEventListener(\"keydown\", handleKeyDown);\n// //         return () => window.removeEventListener(\"keydown\", handleKeyDown);\n// //     }, [running, elapsed, logs]);\n\n// //     useEffect(() => {\n// //         const keys = Object.keys(localStorage).filter(key => key.startsWith(\"logs-\"));\n// //         setAllDates(keys.map(key => key.replace(\"logs-\", \"\")));\n// //     }, []);\n\n// //     useEffect(() => {\n// //         const saved = localStorage.getItem(todayKey);\n// //         setLogs(saved ? JSON.parse(saved) : []);\n// //     }, [todayKey]);\n\n// //     useEffect(() => {\n// //         localStorage.setItem(todayKey, JSON.stringify(logs));\n// //         if (!allDates.includes(selectedDate)) {\n// //             setAllDates([...allDates, selectedDate]);\n// //         }\n// //     }, [logs, todayKey, allDates, selectedDate]);\n\n// //     useEffect(() => {\n// //         let interval;\n// //         if (running) {\n// //             interval = setInterval(() => {\n// //                 setElapsed(Date.now() - startTime);\n// //             }, 100);\n// //         }\n// //         return () => clearInterval(interval);\n// //     }, [running, startTime]);\n\n// //     const startTimer = () => {\n// //         setStartTime(Date.now() - elapsed);\n// //         setRunning(true);\n// //     };\n\n// //     const stopTimer = () => {\n// //         setRunning(false);\n// //         setLogs([...logs, elapsed]);\n// //         setElapsed(0);\n// //     };\n\n// //     const resetLogs = () => {\n// //         setLogs([]);\n// //     };\n\n// //     const getMedian = () => {\n// //         if (logs.length === 0) return 0;\n// //         const sorted = [...logs].sort((a, b) => a - b);\n// //         const mid = Math.floor(sorted.length / 2);\n// //         return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n// //     };\n\n// //     const formatTime = (ms) => {\n// //         const seconds = Math.floor(ms / 1000);\n// //         const mins = Math.floor(seconds / 60);\n// //         const secs = seconds % 60;\n// //         const mills = Math.floor((ms % 1000) / 100);\n// //         return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n// //     };\n\n// //     return (\n// //         <div className=\"w-2xl mx-auto p-6 bg-white shadow-lg rounded-2xl flex flex-col gap-6\">\n// //             <h1 className=\"text-3xl font-bold text-center\">Timer for {selectedDate}</h1>\n\n// //             {selectedDate === new Date().toISOString().split(\"T\")[0] && (\n// //                 <>\n// //                     <div className=\"w-full flex justify-center text-left text-9xl md:text-9xl font-normal\">\n// //                         <p className=\"w-[360px]\">{formatTime(elapsed)}</p>\n// //                     </div>\n// //                     <div className=\"grid grid-cols-3 md:flex-row gap-1 h-15 justify-center\">\n// //                         {!running ? (\n// //                             <button\n// //                                 onClick={startTimer}\n// //                                 className=\"col-span-2 px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-xl transition\"\n// //                             >\n// //                                 Start\n// //                             </button>\n// //                         ) : (\n// //                             <button\n// //                                 onClick={stopTimer}\n// //                                 className=\"col-span-2 px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-xl transition\"\n// //                             >\n// //                                 Stop & Log\n// //                             </button>\n// //                         )}\n// //                         <button\n// //                             onClick={resetLogs}\n// //                             className=\"flex-1 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white font-semibold rounded-xl transition\"\n// //                         >\n// //                             Reset Logs\n// //                         </button>\n// //                     </div>\n// //                 </>\n// //             )}\n// //             <div className=\"self-center h-xl\">\n// //                 <h2 className=\"text-xl text-center font-bold mb-1\">Median of the Day</h2>\n// //                 <p className=\"text-5xl text-center font-semibold\">{formatTime(getMedian())}</p>\n// //             </div>\n// //             <div>\n// /\n// /                 <h2 className=\"text-xl font-semibold mb-2\">Logs</h2>\n// //                 <div className=\"h-48 overflow-y-auto border rounded-xl p-4 bg-gray-50\">\n// //                     {logs.length > 0 ? (\n// //                         <ul className=\"list-disc list-inside space-y-1 text-sm font-extralight\">\n// //                             {logs.map((log, index) => (\n// //                                 <li key={index} className=\"text-base\">{formatTime(log)}</li>\n// //                             ))}\n// //                         </ul>\n// //                     ) : (\n// //                         <p className=\"text-gray-500 italic\">No logs yet.</p>\n// //                     )}\n// //                 </div>\n// //             </div>\n\n// //         </div>\n// //     );\n// // }\n// import React, { useState, useEffect } from \"react\";\n\n// export function TimerWithMedian() {\n//     const [startTime, setStartTime] = useState(null);\n//     const [elapsed, setElapsed] = useState(0);\n//     const [running, setRunning] = useState(false);\n//     const [logs, setLogs] = useState([]);\n//     const [allDates, setAllDates] = useState([]);\n//     const [selectedDate, setSelectedDate] = useState(\n//         new Date().toISOString().split(\"T\")[0]\n//     );\n\n//     const todayKey = `logs-${selectedDate}`;\n\n//     useEffect(() => {\n//         const handleKeyDown = (e) => {\n//             if (e.code === \"Space\") {\n//                 if (\n//                     [\"INPUT\", \"SELECT\", \"TEXTAREA\"].includes(\n//                         document.activeElement.tagName\n//                     )\n//                 ) {\n//                     return;\n//                 }\n//                 e.preventDefault();\n//                 running ? stopTimer() : startTimer();\n//             }\n//         };\n//         window.addEventListener(\"keydown\", handleKeyDown);\n//         return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//     }, [running, elapsed, logs]);\n\n//     useEffect(() => {\n//         const keys = Object.keys(localStorage).filter((key) =>\n//             key.startsWith(\"logs-\")\n//         );\n//         setAllDates(keys.map((key) => key.replace(\"logs-\", \"\")));\n//     }, []);\n\n//     useEffect(() => {\n//         const saved = localStorage.getItem(todayKey);\n//         setLogs(saved ? JSON.parse(saved) : []);\n//     }, [todayKey]);\n\n//     useEffect(() => {\n//         localStorage.setItem(todayKey, JSON.stringify(logs));\n//         if (!allDates.includes(selectedDate)) {\n//             setAllDates([...allDates, selectedDate]);\n//         }\n//     }, [logs, todayKey, allDates, selectedDate]);\n\n//     useEffect(() => {\n//         let interval;\n//         if (running) {\n//             interval = setInterval(() => {\n//                 setElapsed(Date.now() - startTime);\n//             }, 100);\n//         }\n//         return () => clearInterval(interval);\n//     }, [running, startTime]);\n\n//     const startTimer = () => {\n//         setStartTime(Date.now() - elapsed);\n//         setRunning(true);\n//     };\n\n//     const stopTimer = () => {\n//         setRunning(false);\n//         setLogs([...logs, elapsed]);\n//         setElapsed(0);\n//     };\n\n//     const resetLogs = () => {\n//         setLogs([]);\n//     };\n\n//     const getMedian = () => {\n//         if (logs.length === 0) return 0;\n//         const sorted = [...logs].sort((a, b) => a - b);\n//         const mid = Math.floor(sorted.length / 2);\n//         return sorted.length % 2 !== 0\n//             ? sorted[mid]\n//             : (sorted[mid - 1] + sorted[mid]) / 2;\n//     };\n\n//     const formatTime = (ms) => {\n//         const seconds = Math.floor(ms / 1000);\n//         const mins = Math.floor(seconds / 60);\n//         const secs = seconds % 60;\n//         const mills = Math.floor((ms % 1000) / 100);\n//         return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n//     };\n\n//     return (\n//         <div className=\"max-w-xl mx-auto p-6 bg-white dark:bg-gray-900 shadow-lg rounded-2xl flex flex-col gap-6 transition-colors\">\n//             <h1 className=\"text-3xl font-bold text-center text-gray-800 dark:text-gray-100\">\n//                 Timer for {selectedDate}\n//             </h1>\n\n//             {selectedDate === new Date().toISOString().split(\"T\")[0] && (\n//                 <>\n//                     <div className=\"w-full flex justify-center\">\n//                         <p className=\"text-7xl md:text-8xl font-mono text-gray-800 dark:text-gray-100\">\n//                             {formatTime(elapsed)}\n//                         </p>\n//                     </div>\n\n//                     <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n//                         {!running ? (\n//                             <button\n//                                 onClick={startTimer}\n//                                 className=\"flex-1 px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-xl transition\"\n//                             >\n//                                 Start\n//                             </button>\n//                         ) : (\n//                             <button\n//                                 onClick={stopTimer}\n//                                 className=\"flex-1 px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-xl transition\"\n//                             >\n//                                 Stop & Log\n//                             </button>\n//                         )}\n//                         <button\n//                             onClick={resetLogs}\n//                             className=\"flex-1 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white font-semibold rounded-xl transition\"\n//                         >\n//                             Reset Logs\n//                         </button>\n//                     </div>\n//                 </>\n//             )}\n\n//             <div className=\"text-center\">\n//                 <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100 mb-1\">\n//                     Median of the Day\n//                 </h2>\n//                 <p className=\"text-5xl font-mono text-gray-900 dark:text-gray-50\">\n//                     {formatTime(getMedian())}\n//                 </p>\n//             </div>\n\n//             <div>\n//                 <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100 mb-2\">\n//                     Logs\n//                 </h2>\n//                 <div className=\"h-48 overflow-y-auto border border-gray-300 dark:border-gray-700 rounded-xl p-4 bg-gray-50 dark:bg-gray-800\">\n//                     {logs.length > 0 ? (\n//                         <ul className=\"list-decimal list-inside text-gray-800 dark:text-gray-200 font-mono space-y-1\">\n//                             {logs.map((log, index) => (\n//                                 <li key={index}>{formatTime(log)}</li>\n//                             ))}\n//                         </ul>\n//                     ) : (\n//                         <p className=\"text-gray-500 dark:text-gray-400 italic\">No logs yet.</p>\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }","map":{"version":3,"names":[],"sources":["/Users/peterplatis/Documents/Timers-Median/src/components/TimerWithMedian1.js"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n\n// // export function TimerWithMedian() {\n// //     const [startTime, setStartTime] = useState(null);\n// //     const [elapsed, setElapsed] = useState(0);\n// //     const [running, setRunning] = useState(false);\n// //     const [logs, setLogs] = useState([]);\n// //     const [allDates, setAllDates] = useState([]);\n// //     const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split(\"T\")[0]);\n\n// //     const todayKey = `logs-${selectedDate}`;\n\n// //     useEffect(() => {\n// //         const handleKeyDown = (e) => {\n// //             if (e.code === \"Space\") {\n// //                 if ([\"INPUT\", \"SELECT\", \"TEXTAREA\"].includes(document.activeElement.tagName)) {\n// //                     return;\n// //                 }\n// //                 e.preventDefault();\n// //                 running ? stopTimer() : startTimer();\n// //             }\n// //         };\n// //         window.addEventListener(\"keydown\", handleKeyDown);\n// //         return () => window.removeEventListener(\"keydown\", handleKeyDown);\n// //     }, [running, elapsed, logs]);\n\n// //     useEffect(() => {\n// //         const keys = Object.keys(localStorage).filter(key => key.startsWith(\"logs-\"));\n// //         setAllDates(keys.map(key => key.replace(\"logs-\", \"\")));\n// //     }, []);\n\n// //     useEffect(() => {\n// //         const saved = localStorage.getItem(todayKey);\n// //         setLogs(saved ? JSON.parse(saved) : []);\n// //     }, [todayKey]);\n\n// //     useEffect(() => {\n// //         localStorage.setItem(todayKey, JSON.stringify(logs));\n// //         if (!allDates.includes(selectedDate)) {\n// //             setAllDates([...allDates, selectedDate]);\n// //         }\n// //     }, [logs, todayKey, allDates, selectedDate]);\n\n// //     useEffect(() => {\n// //         let interval;\n// //         if (running) {\n// //             interval = setInterval(() => {\n// //                 setElapsed(Date.now() - startTime);\n// //             }, 100);\n// //         }\n// //         return () => clearInterval(interval);\n// //     }, [running, startTime]);\n\n// //     const startTimer = () => {\n// //         setStartTime(Date.now() - elapsed);\n// //         setRunning(true);\n// //     };\n\n// //     const stopTimer = () => {\n// //         setRunning(false);\n// //         setLogs([...logs, elapsed]);\n// //         setElapsed(0);\n// //     };\n\n// //     const resetLogs = () => {\n// //         setLogs([]);\n// //     };\n\n// //     const getMedian = () => {\n// //         if (logs.length === 0) return 0;\n// //         const sorted = [...logs].sort((a, b) => a - b);\n// //         const mid = Math.floor(sorted.length / 2);\n// //         return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n// //     };\n\n// //     const formatTime = (ms) => {\n// //         const seconds = Math.floor(ms / 1000);\n// //         const mins = Math.floor(seconds / 60);\n// //         const secs = seconds % 60;\n// //         const mills = Math.floor((ms % 1000) / 100);\n// //         return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n// //     };\n\n// //     return (\n// //         <div className=\"w-2xl mx-auto p-6 bg-white shadow-lg rounded-2xl flex flex-col gap-6\">\n// //             <h1 className=\"text-3xl font-bold text-center\">Timer for {selectedDate}</h1>\n\n// //             {selectedDate === new Date().toISOString().split(\"T\")[0] && (\n// //                 <>\n// //                     <div className=\"w-full flex justify-center text-left text-9xl md:text-9xl font-normal\">\n// //                         <p className=\"w-[360px]\">{formatTime(elapsed)}</p>\n// //                     </div>\n// //                     <div className=\"grid grid-cols-3 md:flex-row gap-1 h-15 justify-center\">\n// //                         {!running ? (\n// //                             <button\n// //                                 onClick={startTimer}\n// //                                 className=\"col-span-2 px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-xl transition\"\n// //                             >\n// //                                 Start\n// //                             </button>\n// //                         ) : (\n// //                             <button\n// //                                 onClick={stopTimer}\n// //                                 className=\"col-span-2 px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-xl transition\"\n// //                             >\n// //                                 Stop & Log\n// //                             </button>\n// //                         )}\n// //                         <button\n// //                             onClick={resetLogs}\n// //                             className=\"flex-1 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white font-semibold rounded-xl transition\"\n// //                         >\n// //                             Reset Logs\n// //                         </button>\n// //                     </div>\n// //                 </>\n// //             )}\n// //             <div className=\"self-center h-xl\">\n// //                 <h2 className=\"text-xl text-center font-bold mb-1\">Median of the Day</h2>\n// //                 <p className=\"text-5xl text-center font-semibold\">{formatTime(getMedian())}</p>\n// //             </div>\n// //             <div>\n// /\n// /                 <h2 className=\"text-xl font-semibold mb-2\">Logs</h2>\n// //                 <div className=\"h-48 overflow-y-auto border rounded-xl p-4 bg-gray-50\">\n// //                     {logs.length > 0 ? (\n// //                         <ul className=\"list-disc list-inside space-y-1 text-sm font-extralight\">\n// //                             {logs.map((log, index) => (\n// //                                 <li key={index} className=\"text-base\">{formatTime(log)}</li>\n// //                             ))}\n// //                         </ul>\n// //                     ) : (\n// //                         <p className=\"text-gray-500 italic\">No logs yet.</p>\n// //                     )}\n// //                 </div>\n// //             </div>\n\n\n// //         </div>\n// //     );\n// // }\n// import React, { useState, useEffect } from \"react\";\n\n// export function TimerWithMedian() {\n//     const [startTime, setStartTime] = useState(null);\n//     const [elapsed, setElapsed] = useState(0);\n//     const [running, setRunning] = useState(false);\n//     const [logs, setLogs] = useState([]);\n//     const [allDates, setAllDates] = useState([]);\n//     const [selectedDate, setSelectedDate] = useState(\n//         new Date().toISOString().split(\"T\")[0]\n//     );\n\n//     const todayKey = `logs-${selectedDate}`;\n\n//     useEffect(() => {\n//         const handleKeyDown = (e) => {\n//             if (e.code === \"Space\") {\n//                 if (\n//                     [\"INPUT\", \"SELECT\", \"TEXTAREA\"].includes(\n//                         document.activeElement.tagName\n//                     )\n//                 ) {\n//                     return;\n//                 }\n//                 e.preventDefault();\n//                 running ? stopTimer() : startTimer();\n//             }\n//         };\n//         window.addEventListener(\"keydown\", handleKeyDown);\n//         return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//     }, [running, elapsed, logs]);\n\n//     useEffect(() => {\n//         const keys = Object.keys(localStorage).filter((key) =>\n//             key.startsWith(\"logs-\")\n//         );\n//         setAllDates(keys.map((key) => key.replace(\"logs-\", \"\")));\n//     }, []);\n\n//     useEffect(() => {\n//         const saved = localStorage.getItem(todayKey);\n//         setLogs(saved ? JSON.parse(saved) : []);\n//     }, [todayKey]);\n\n//     useEffect(() => {\n//         localStorage.setItem(todayKey, JSON.stringify(logs));\n//         if (!allDates.includes(selectedDate)) {\n//             setAllDates([...allDates, selectedDate]);\n//         }\n//     }, [logs, todayKey, allDates, selectedDate]);\n\n//     useEffect(() => {\n//         let interval;\n//         if (running) {\n//             interval = setInterval(() => {\n//                 setElapsed(Date.now() - startTime);\n//             }, 100);\n//         }\n//         return () => clearInterval(interval);\n//     }, [running, startTime]);\n\n//     const startTimer = () => {\n//         setStartTime(Date.now() - elapsed);\n//         setRunning(true);\n//     };\n\n//     const stopTimer = () => {\n//         setRunning(false);\n//         setLogs([...logs, elapsed]);\n//         setElapsed(0);\n//     };\n\n//     const resetLogs = () => {\n//         setLogs([]);\n//     };\n\n//     const getMedian = () => {\n//         if (logs.length === 0) return 0;\n//         const sorted = [...logs].sort((a, b) => a - b);\n//         const mid = Math.floor(sorted.length / 2);\n//         return sorted.length % 2 !== 0\n//             ? sorted[mid]\n//             : (sorted[mid - 1] + sorted[mid]) / 2;\n//     };\n\n//     const formatTime = (ms) => {\n//         const seconds = Math.floor(ms / 1000);\n//         const mins = Math.floor(seconds / 60);\n//         const secs = seconds % 60;\n//         const mills = Math.floor((ms % 1000) / 100);\n//         return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n//     };\n\n//     return (\n//         <div className=\"max-w-xl mx-auto p-6 bg-white dark:bg-gray-900 shadow-lg rounded-2xl flex flex-col gap-6 transition-colors\">\n//             <h1 className=\"text-3xl font-bold text-center text-gray-800 dark:text-gray-100\">\n//                 Timer for {selectedDate}\n//             </h1>\n\n//             {selectedDate === new Date().toISOString().split(\"T\")[0] && (\n//                 <>\n//                     <div className=\"w-full flex justify-center\">\n//                         <p className=\"text-7xl md:text-8xl font-mono text-gray-800 dark:text-gray-100\">\n//                             {formatTime(elapsed)}\n//                         </p>\n//                     </div>\n\n//                     <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n//                         {!running ? (\n//                             <button\n//                                 onClick={startTimer}\n//                                 className=\"flex-1 px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-xl transition\"\n//                             >\n//                                 Start\n//                             </button>\n//                         ) : (\n//                             <button\n//                                 onClick={stopTimer}\n//                                 className=\"flex-1 px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-xl transition\"\n//                             >\n//                                 Stop & Log\n//                             </button>\n//                         )}\n//                         <button\n//                             onClick={resetLogs}\n//                             className=\"flex-1 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white font-semibold rounded-xl transition\"\n//                         >\n//                             Reset Logs\n//                         </button>\n//                     </div>\n//                 </>\n//             )}\n\n//             <div className=\"text-center\">\n//                 <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100 mb-1\">\n//                     Median of the Day\n//                 </h2>\n//                 <p className=\"text-5xl font-mono text-gray-900 dark:text-gray-50\">\n//                     {formatTime(getMedian())}\n//                 </p>\n//             </div>\n\n//             <div>\n//                 <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100 mb-2\">\n//                     Logs\n//                 </h2>\n//                 <div className=\"h-48 overflow-y-auto border border-gray-300 dark:border-gray-700 rounded-xl p-4 bg-gray-50 dark:bg-gray-800\">\n//                     {logs.length > 0 ? (\n//                         <ul className=\"list-decimal list-inside text-gray-800 dark:text-gray-200 font-mono space-y-1\">\n//                             {logs.map((log, index) => (\n//                                 <li key={index}>{formatTime(log)}</li>\n//                             ))}\n//                         </ul>\n//                     ) : (\n//                         <p className=\"text-gray-500 dark:text-gray-400 italic\">No logs yet.</p>\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}