{"ast":null,"code":"var _jsxFileName = \"/Users/peterplatis/Documents/Timers-Median/src/components/Logs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LogsViewer() {\n  _s();\n  const [allDates, setAllDates] = useState([]);\n  const [logsByDate, setLogsByDate] = useState({});\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  useEffect(() => {\n    const keys = Object.keys(localStorage).filter(key => key.startsWith(\"logs-\"));\n    const dates = keys.map(key => key.replace(\"logs-\", \"\"));\n    const data = {};\n    dates.forEach(date => {\n      const saved = localStorage.getItem(`logs-${date}`);\n      if (saved) {\n        data[date] = JSON.parse(saved);\n      }\n    });\n    setAllDates(dates);\n    if (dates.length > 0) {\n      setSelectedDate(dates[0]);\n    }\n    setLogsByDate(data);\n  }, []);\n  const formatTime = ms => {\n    const seconds = Math.floor(ms / 1000);\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    const mills = ms % 1000;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n  };\n  const getMedian = logs => {\n    if (!logs || logs.length === 0) return 0;\n    const sorted = [...logs].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" p-6 max-w-2xl mx-auto bg-white rounded-2xl shadow-md space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title text-2xl font-bold\",\n      children: \"Logs Calendar Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), allDates.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No logs saved yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 39\n    }, this), allDates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"mr-2 font-semibold\",\n        children: \"Select Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: selectedDate,\n        onChange: e => setSelectedDate(e.target.value),\n        className: \"border p-2 rounded-xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this), selectedDate && logsByDate[selectedDate] ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold\",\n        children: [\"Logs for \", selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border p-4 rounded-xl h-auto overflow-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"logs list-disc list-inside font-extralight\",\n          children: logsByDate[selectedDate].map((log, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: formatTime(log)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 font-mono\",\n        children: [\"Median: \", formatTime(getMedian(logsByDate[selectedDate]))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this) : selectedDate && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No logs for selected date.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(LogsViewer, \"GEu9UhsNP1yosMwDFc9xzmAJwXg=\");\n_c = LogsViewer;\nvar _c;\n$RefreshReg$(_c, \"LogsViewer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LogsViewer","_s","allDates","setAllDates","logsByDate","setLogsByDate","selectedDate","setSelectedDate","keys","Object","localStorage","filter","key","startsWith","dates","map","replace","data","forEach","date","saved","getItem","JSON","parse","length","formatTime","ms","seconds","Math","floor","mins","secs","mills","toString","padStart","getMedian","logs","sorted","sort","a","b","mid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","log","index","_c","$RefreshReg$"],"sources":["/Users/peterplatis/Documents/Timers-Median/src/components/Logs.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function LogsViewer() {\n    const [allDates, setAllDates] = useState([]);\n    const [logsByDate, setLogsByDate] = useState({});\n    const [selectedDate, setSelectedDate] = useState(\"\");\n\n    useEffect(() => {\n        const keys = Object.keys(localStorage).filter(key => key.startsWith(\"logs-\"));\n        const dates = keys.map(key => key.replace(\"logs-\", \"\"));\n        const data = {};\n        dates.forEach(date => {\n            const saved = localStorage.getItem(`logs-${date}`);\n            if (saved) {\n                data[date] = JSON.parse(saved);\n            }\n        });\n        setAllDates(dates);\n        if (dates.length > 0) {\n            setSelectedDate(dates[0]);\n        }\n        setLogsByDate(data);\n    }, []);\n\n    const formatTime = (ms) => {\n        const seconds = Math.floor(ms / 1000);\n        const mins = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        const mills = ms % 1000;\n        return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n    };\n\n    const getMedian = (logs) => {\n        if (!logs || logs.length === 0) return 0;\n        const sorted = [...logs].sort((a, b) => a - b);\n        const mid = Math.floor(sorted.length / 2);\n        return sorted.length % 2 !== 0\n            ? sorted[mid]\n            : (sorted[mid - 1] + sorted[mid]) / 2;\n    };\n\n    return (\n        <div className=\" p-6 max-w-2xl mx-auto bg-white rounded-2xl shadow-md space-y-6\">\n            <h1 className=\"title text-2xl font-bold\">Logs Calendar Viewer</h1>\n            {allDates.length === 0 && <p>No logs saved yet.</p>}\n            {allDates.length > 0 && (\n                <div className=\"mb-4\">\n                    <label className=\"mr-2 font-semibold\">Select Date:</label>\n                    <input\n                        type=\"date\"\n                        value={selectedDate}\n                        onChange={(e) => setSelectedDate(e.target.value)}\n                        className=\"border p-2 rounded-xl\"\n                    />\n                </div>\n            )}\n            {selectedDate && logsByDate[selectedDate] ? (\n                <div>\n                    <h2 className=\"text-xl font-semibold\">Logs for {selectedDate}</h2>\n                    <div className=\"border p-4 rounded-xl h-auto overflow-auto\">\n                        <ul className=\"logs list-disc list-inside font-extralight\">\n                            {logsByDate[selectedDate].map((log, index) => (\n                                <li key={index}>{formatTime(log)}</li>\n                            ))}\n                        </ul>\n                    </div>\n                    <p className=\"mt-2 font-mono\">Median: {formatTime(getMedian(logsByDate[selectedDate]))}</p>\n                </div>\n\n            ) : (\n                selectedDate && <p>No logs for selected date.</p>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}