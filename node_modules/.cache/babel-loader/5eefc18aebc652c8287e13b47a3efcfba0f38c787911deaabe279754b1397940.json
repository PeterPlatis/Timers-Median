{"ast":null,"code":"var _jsxFileName = \"/Users/peterplatis/Documents/Timers-Median/src/components/MonthMedian.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MonthMedian() {\n  _s();\n  const [allDates, setAllDates] = useState([]);\n  const [logsByDate, setLogsByDate] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"\");\n  useEffect(() => {\n    const keys = Object.keys(localStorage).filter(key => key.startsWith(\"logs-\"));\n    const dates = keys.map(key => key.replace(\"logs-\", \"\"));\n    const data = {};\n    dates.forEach(date => {\n      const saved = localStorage.getItem(`logs-${date}`);\n      if (saved) {\n        data[date] = JSON.parse(saved);\n      }\n    });\n    setAllDates(dates);\n    if (dates.length > 0) {\n      const today = new Date();\n      const monthStr = today.toISOString().slice(0, 7);\n      setSelectedMonth(monthStr);\n    }\n    setLogsByDate(data);\n  }, []);\n  const formatTime = ms => {\n    const seconds = Math.floor(ms / 1000);\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    const mills = ms % 1000;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n  };\n  const getMedian = values => {\n    if (!values || values.length === 0) return 0;\n    const sorted = [...values].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n  };\n  const allLogsForMonth = allDates.filter(date => date.startsWith(selectedMonth)).flatMap(date => logsByDate[date] || []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component p-6 mx-auto bg-white rounded-2xl shadow-md space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title text-2xl font-bold\",\n      children: \"Monthly Median Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), allDates.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No logs saved yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 39\n    }, this), allDates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"mr-2 font-semibold\",\n        children: \"Select Month:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"month\",\n        value: selectedMonth,\n        onChange: e => setSelectedMonth(e.target.value),\n        className: \"border p-2 rounded-xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), allLogsForMonth.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border p-4 rounded-xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold\",\n        children: [\"Median for \", selectedMonth]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 font-mono\",\n        children: formatTime(getMedian(allLogsForMonth))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this) : selectedMonth && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No logs for selected month.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(MonthMedian, \"W5yvUU29Cf8D3ZeUpQ0fjjvrIdQ=\");\n_c = MonthMedian;\nvar _c;\n$RefreshReg$(_c, \"MonthMedian\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MonthMedian","_s","allDates","setAllDates","logsByDate","setLogsByDate","selectedMonth","setSelectedMonth","keys","Object","localStorage","filter","key","startsWith","dates","map","replace","data","forEach","date","saved","getItem","JSON","parse","length","today","Date","monthStr","toISOString","slice","formatTime","ms","seconds","Math","floor","mins","secs","mills","toString","padStart","getMedian","values","sorted","sort","a","b","mid","allLogsForMonth","flatMap","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/peterplatis/Documents/Timers-Median/src/components/MonthMedian.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function MonthMedian() {\n    const [allDates, setAllDates] = useState([]);\n    const [logsByDate, setLogsByDate] = useState({});\n    const [selectedMonth, setSelectedMonth] = useState(\"\");\n\n    useEffect(() => {\n        const keys = Object.keys(localStorage).filter(key => key.startsWith(\"logs-\"));\n        const dates = keys.map(key => key.replace(\"logs-\", \"\"));\n        const data = {};\n        dates.forEach(date => {\n            const saved = localStorage.getItem(`logs-${date}`);\n            if (saved) {\n                data[date] = JSON.parse(saved);\n            }\n        });\n        setAllDates(dates);\n        if (dates.length > 0) {\n            const today = new Date();\n            const monthStr = today.toISOString().slice(0, 7);\n            setSelectedMonth(monthStr);\n        }\n        setLogsByDate(data);\n    }, []);\n\n    const formatTime = (ms) => {\n        const seconds = Math.floor(ms / 1000);\n        const mins = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        const mills = ms % 1000;\n        return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n    };\n\n    const getMedian = (values) => {\n        if (!values || values.length === 0) return 0;\n        const sorted = [...values].sort((a, b) => a - b);\n        const mid = Math.floor(sorted.length / 2);\n        return sorted.length % 2 !== 0\n            ? sorted[mid]\n            : (sorted[mid - 1] + sorted[mid]) / 2;\n    };\n\n    const allLogsForMonth = allDates\n        .filter(date => date.startsWith(selectedMonth))\n        .flatMap(date => logsByDate[date] || []);\n\n    return (\n        <div className=\"component p-6 mx-auto bg-white rounded-2xl shadow-md space-y-6\">\n            <h1 className=\"title text-2xl font-bold\">Monthly Median Viewer</h1>\n            {allDates.length === 0 && <p>No logs saved yet.</p>}\n            {allDates.length > 0 && (\n                <div className=\"mb-4\">\n                    <label className=\"mr-2 font-semibold\">Select Month:</label>\n                    <input\n                        type=\"month\"\n                        value={selectedMonth}\n                        onChange={(e) => setSelectedMonth(e.target.value)}\n                        className=\"border p-2 rounded-xl\"\n                    />\n                </div>\n            )}\n            {allLogsForMonth.length > 0 ? (\n                <div className=\"border p-4 rounded-xl\">\n                    <h2 className=\"text-xl font-semibold\">Median for {selectedMonth}</h2>\n                    <p className=\"mt-2 font-mono\">{formatTime(getMedian(allLogsForMonth))}</p>\n                </div>\n            ) : (\n                selectedMonth && <p>No logs for selected month.</p>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}