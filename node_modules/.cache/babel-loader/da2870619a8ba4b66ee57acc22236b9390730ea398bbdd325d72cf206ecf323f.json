{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n\n// export default function MonthMedian() {\n//     const [allDates, setAllDates] = useState([]);\n//     const [logsByDate, setLogsByDate] = useState({});\n//     const [selectedMonth, setSelectedMonth] = useState(\"\");\n\n//     useEffect(() => {\n//         const keys = Object.keys(localStorage).filter(key => key.startsWith(\"logs-\"));\n//         const dates = keys.map(key => key.replace(\"logs-\", \"\"));\n//         const data = {};\n//         dates.forEach(date => {\n//             const saved = localStorage.getItem(`logs-${date}`);\n//             if (saved) {\n//                 data[date] = JSON.parse(saved);\n//             }\n//         });\n//         setAllDates(dates);\n//         if (dates.length > 0) {\n//             const today = new Date();\n//             const monthStr = today.toISOString().slice(0, 7);\n//             setSelectedMonth(monthStr);\n//         }\n//         setLogsByDate(data);\n//     }, []);\n\n//     const formatTime = (ms) => {\n//         const seconds = Math.floor(ms / 1000);\n//         const mins = Math.floor(seconds / 60);\n//         const secs = seconds % 60;\n//         const mills = Math.floor((ms % 1000) / 100);\n//         return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n//     };\n\n//     const getMedian = (values) => {\n//         if (!values || values.length === 0) return 0;\n//         const sorted = [...values].sort((a, b) => a - b);\n//         const mid = Math.floor(sorted.length / 2);\n//         return sorted.length % 2 !== 0\n//             ? sorted[mid]\n//             : (sorted[mid - 1] + sorted[mid]) / 2;\n//     };\n\n//     const allLogsForMonth = allDates\n//         .filter(date => date.startsWith(selectedMonth))\n//         .flatMap(date => logsByDate[date] || []);\n\n//     return (\n//         <div className=\"component p-6 mx-auto w-2xs bg-white rounded-2xl shadow-md space-y-6\">\n//             <h1 className=\"title text-2xl font-bold\">Monthly Median Viewer</h1>\n//             {allDates.length === 0 && <p>No logs saved yet.</p>}\n//             {allDates.length > 0 && (\n//                 <div className=\"mb-4\">\n//                     <label className=\"mr-2 font-semibold\">Select Month:</label>\n//                     <input\n//                         type=\"month\"\n//                         value={selectedMonth}\n//                         onChange={(e) => setSelectedMonth(e.target.value)}\n//                         className=\"border p-2 rounded-xl\"\n//                     />\n//                 </div>\n//             )}\n//             {allLogsForMonth.length > 0 ? (\n//                 <div className=\"border p-4 rounded-xl\">\n//                     <h2 className=\"text-xl font-semibold\">Median for {selectedMonth}</h2>\n//                     <p className=\"mt-2 \">{formatTime(getMedian(allLogsForMonth))}</p>\n//                 </div>\n//             ) : (\n//                 selectedMonth && <p>No logs for selected month.</p>\n//             )}\n//         </div>\n//     );\n// }","map":{"version":3,"names":[],"sources":["/Users/peterplatis/Documents/Timers-Median/src/components/MonthMedian.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\n// export default function MonthMedian() {\n//     const [allDates, setAllDates] = useState([]);\n//     const [logsByDate, setLogsByDate] = useState({});\n//     const [selectedMonth, setSelectedMonth] = useState(\"\");\n\n//     useEffect(() => {\n//         const keys = Object.keys(localStorage).filter(key => key.startsWith(\"logs-\"));\n//         const dates = keys.map(key => key.replace(\"logs-\", \"\"));\n//         const data = {};\n//         dates.forEach(date => {\n//             const saved = localStorage.getItem(`logs-${date}`);\n//             if (saved) {\n//                 data[date] = JSON.parse(saved);\n//             }\n//         });\n//         setAllDates(dates);\n//         if (dates.length > 0) {\n//             const today = new Date();\n//             const monthStr = today.toISOString().slice(0, 7);\n//             setSelectedMonth(monthStr);\n//         }\n//         setLogsByDate(data);\n//     }, []);\n\n//     const formatTime = (ms) => {\n//         const seconds = Math.floor(ms / 1000);\n//         const mins = Math.floor(seconds / 60);\n//         const secs = seconds % 60;\n//         const mills = Math.floor((ms % 1000) / 100);\n//         return `${mins}:${secs.toString().padStart(2, \"0\")}.${mills}`;\n//     };\n\n//     const getMedian = (values) => {\n//         if (!values || values.length === 0) return 0;\n//         const sorted = [...values].sort((a, b) => a - b);\n//         const mid = Math.floor(sorted.length / 2);\n//         return sorted.length % 2 !== 0\n//             ? sorted[mid]\n//             : (sorted[mid - 1] + sorted[mid]) / 2;\n//     };\n\n//     const allLogsForMonth = allDates\n//         .filter(date => date.startsWith(selectedMonth))\n//         .flatMap(date => logsByDate[date] || []);\n\n//     return (\n//         <div className=\"component p-6 mx-auto w-2xs bg-white rounded-2xl shadow-md space-y-6\">\n//             <h1 className=\"title text-2xl font-bold\">Monthly Median Viewer</h1>\n//             {allDates.length === 0 && <p>No logs saved yet.</p>}\n//             {allDates.length > 0 && (\n//                 <div className=\"mb-4\">\n//                     <label className=\"mr-2 font-semibold\">Select Month:</label>\n//                     <input\n//                         type=\"month\"\n//                         value={selectedMonth}\n//                         onChange={(e) => setSelectedMonth(e.target.value)}\n//                         className=\"border p-2 rounded-xl\"\n//                     />\n//                 </div>\n//             )}\n//             {allLogsForMonth.length > 0 ? (\n//                 <div className=\"border p-4 rounded-xl\">\n//                     <h2 className=\"text-xl font-semibold\">Median for {selectedMonth}</h2>\n//                     <p className=\"mt-2 \">{formatTime(getMedian(allLogsForMonth))}</p>\n//                 </div>\n//             ) : (\n//                 selectedMonth && <p>No logs for selected month.</p>\n//             )}\n//         </div>\n//     );\n// }\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}